Algorithm: From each unvisited vertex, start the DFS, mark it gray(1) while entering and mark it black(2) on exit. If DFS moves to a gray vertex, then we have found a cycle
Code::
vector<vector<int>> graph;
    vector<int> color;
    bool dfs(int v){
     color[v]=1;
     for(int i=0;i<graph[v].size();i++){
        if(color[graph[v][i]] == 0 ){
            if(dfs(graph[v][i])){
                return true;
            }
        }else if(color[graph[v][i]] == 1){
            return true;
        }
    }
    color[v]=2;
    return false;
}
bool canFinish(int numCourses, vector<vector<int>>& prerequisites){
    int n=prerequisites.size();
    if(n==0 || n==1){
        return 1;
    }
    graph.resize(numCourses);
    for(int i=0;i<n;i++){
        graph[prerequisites[i][0]].push_back(prerequisites[i][1]);
    }
    color.assign(numCourses,0);
    for(int i=0;i<numCourses;i++){
        if(dfs(i)){
            return false;
        }
    }
    return true;
}

Code;
vector<vector<TreeNode*>> ans; 
vector<TreeNode*> temp;
void fun(int &width){
    temp.clear();
    for(int i=0;i<ans[0].size();i++){
        if(ans[0][i]!=NULL){
            if(i==0){
                int y=0;
                if(ans[0][i]->left){
                    y=1;
                    temp.push_back(ans[0][i]->left);
                    temp.push_back(ans[0][i]->right);
                }
                if(y==0){
                    if(ans[0][i]->right){
                        temp.push_back(ans[0][i]->right);
                    }
                }
            }else if(i==ans[0].size()-1){
                int y=0;
                if(ans[0][i]->right){
                    y=1;
                    temp.push_back(ans[0][i]->left);
                    temp.push_back(ans[0][i]->right);
                }
                if(y==0){
                    if(ans[0][i]->left){
                        temp.push_back(ans[0][i]->left);
                    }
                }
            }else{
                if(temp.size()>0){
                    temp.push_back(ans[0][i]->left);
                    temp.push_back(ans[0][i]->right);
                }else{
                    if(ans[0][i]->left){
                        temp.push_back(ans[0][i]->left);
                        temp.push_back(ans[0][i]->right);
                    }else if(ans[0][i]->right){
                        temp.push_back(ans[0][i]->right);
                    }
                }
            }
        }else{
            if(i==0 || i==ans[0].size()-1){
                continue;
            }
            else{
                if(temp.size()>0){
                    temp.push_back(NULL);
                    temp.push_back(NULL);
                }
            }
        }
    }
    int i=0,j=temp.size()-1;
    while(j>i && temp[j]==NULL){
        temp.pop_back();
        j--;
    }
    if(temp.size()==0){
        return;
    }
    width=max(width,j-i+1);
    ans.clear();
    ans.push_back(temp);
    fun(width);
}
int widthOfBinaryTree(TreeNode* root) {
    if(root==NULL){
        return 0;
    }
    temp.push_back(root);
    ans.push_back(temp);
    int width=1;
    fun(width);
    return width;
}
